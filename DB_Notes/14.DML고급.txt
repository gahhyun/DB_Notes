1. 서브쿼리(SubQurey)
    1) 하나의 SQL문 안에 포함이 되어있는 또 다른 SQL문을 말함
        -하나의 SQL문으로 요구사항을 해결할 수 없는, 조금 더 복잡한 데이터를 추출할 때 사용

    2) 조인
        -조인에 참여하는 모든 테이블이 대등한 관계에 있기 때문에
        -모든 테이블의 컬럼을 어떤 위치에서라도 자유롭게 사용가능
       서브쿼리
        -서브쿼리는 메인 쿼리의 컬럼을 모두 사용할 수 있지만
        -메인 쿼리는 서브쿼리의 컬럼을 사용할 수 없다

    3) 서브쿼리 사용시 주의점
        -서브쿼리를 괄호로 감싸서 사용함
        -서브 쿼리는 단일 행(Single Row) 또는 복수 행(Multiple Row)
          비교 연산자와 함께 사용 가능
          -단일 행 비교 연산자는 서브쿼리의 결과가 반드시 1건 이하이여야 함
          -복수 행 비교 연산자는 서브쿼리의 결과 건수와 상관이 없음
        -서브쿼리에서는 ORDER BY를 사용하지 못한다
            -ORDER BY절은 SELECT절에서 오직 한 개만 올 수 있기때문에
             ORDER BY절은 메인 쿼리의 마지막 문장에 위치해야 함

    4) 서브 쿼리가 사용 가능한 위치
        -SELECT - FROM - WHERE - HAVING - ORDER BY 절
        -INSERT절의 VALUES절
        -UPDATE절의 SET절 

    5) 반환형태에 따른 서브쿼리 분류
        -단일 행 서브 쿼리
            -서브쿼리의 실행 결과가 항상 1건 이하인 서브쿼리를 의미함
            -항상 비교연산자와 함께 사용됨
            - =, <, <=, >=, <>

        -다중 행 서브쿼리
            -서브쿼리의 실행결과가 여러 건인 서브쿼리를 의미함
            -다중 행 서브쿼리는 다중 행 비교연산자와 함께 사용함
            -IN , EXISTS
                -결과값 중에 있는 것 중에서의 의미
                -IN은 전체 레코드를 스캔하고, EXISTS는 존재여부만 확인하고 스캔하지 않음(상대적으로 빠름)
                -존재하면 true / 존재하지 않으면 false

    6) 사용위치에 따른 서브쿼리 분류
        (1) 중첩 서브쿼리
            -WHERE절
        (2) 인라인 뷰
            -from절 내에 존재하는 서브쿼리를 인라인 뷰 서브쿼리 라고 함
        (3) 스칼라 서브쿼리
            -SELECT절
            -SELECT절 내에 존재하는 서브쿼리를 스칼라 서브쿼리라고 함


2. 원도우 함수 (WINDOW FUNCTION)
    1) 행과 행간의 관계에서 다양한 연산 처리를 할 수 있는 함수
    2) 분석함수로도 알려져 있음 (ANSI 표준은 원도우 함수임)
    3) 원도우함수는 일반 함수와 달리 중첩하여 호출될 수 는 없음
    4) 종류
        -집계관련함수
            -COUNT()
            -AVG()
        -순위집계함수
            -RANK()
            -DENSE_RANK()
            -ROW_NUMBER()
    5) 문법

        SELECT      원도우함수(인자) OVER(PARTITION BY 컬럼 ORDER BY 컬럼)
        FROM        테이블명
        ;

        -PARTITION BY
            -FROM절 이하에서 나온 결과집합을 특정 컬럼(들)을 기준으로 그룹화할 수 있음
            -전체직원 정보를 출력하면서 각 직원이 속한 부서별로 그룹화 할 수 있음

    6) 순위집계
        RANK()
        -SELECT RANK() OVER(PARTITION BY [그룹할 컬럼들] ORDER BY [순위를 매길 때 사용할 컬럼들])
         FROM 테이블명 
            -예: 1등(100점), 2등(90점), 3등(85점), 3등(85점), 5등(80점), 6등(79등),...

        DENSE_RANK()
        -SELECT DENSE_RANK() OVER(PARTITION BY [그룹할 컬럼들] ORDER BY [순위를 매길 때 사용할 컬럼들])
         FROM 테이블명 
            -예: 1등(100점), 2등(90점), 3등(85점), 3등(85점), 4등(80점), 5등(79등),...

        ROW_NUMBER()
        -SELECT ROW_NUMBER() OVER(PARTITION BY [그룹할 컬럼들] ORDER BY [순위를 매길 때 사용할 컬럼들])
         FROM 테이블명 
            -예: 1등(100점), 2등(90점), 3등(85점), 4등(85점), 5등(80점), 6등(79등),...


3. WITH문 활용
    1) SELECT문인 결과 임시 집합으로 저장해 두고
    2) SQL문에서 마치 테이블처럼 해당 집합을 불러올 수 있다
    3) WITH문을 사용하여 복잡한 SQL문을 단순화 시킬 수 있음
    4) 공통 테이블 표현식(Common Table Expression)이라고도 함
    5) WITH문 내에 존재하는 SELECT문의 결과집합이 하나의 뷰가 됨
        -그 뷰의 이름이 바로 WITH문의 명칭임


4. 계층형 SQL
    0) WITH문을 이용하여 재귀 쿼리 
        -데이터 값 기준 부모 자식간의 관계를 표현 
    1) 순방향(위에서 아래로) 전개
    2) 역방향(아래에서 위로) 전개
    3) 문법
        WITH RECURSIVE recursive_name AS
        (
            SELECT문
            UNION {
                -- 반복쿼리
            SELECT문}
        )
        --부모쿼리
        SELECT * FROM recursive_name 
        ;


5. 문자열 함수
    1) SUBSTRING(string, int, int)
    2) LPAD(string, n, string) / RPAD(string, n, string)
        -첫번째 명시한 문자열에 길이가n이 되도록 좌측부터 세번째
         명시한 문자열로 채운 표현식을 반환함