1. COMMIT
    1) 데이터 삽입, 갱신, 삭제를 완전히 데이터베이스에 기록하는 것
    2) 설정
        -트랜잭션 설정을 'Manual Commit'으로 설정함
            -no auto commit
            -DB변경 작업 후 Commit 혹은 rollback 명령을 실행해야 함
            -rollback은 이전단계로 돌아감 전에 했던 commit를 삭제

2. INSERT
    1) 테이블에 데이터를 입력
    2) INSERT INTO TABLE_NAME VALUES(VALUE1, VALLUE2,...);
        -테이블의 컬럼 순서대로 입력

       INSERT INTO TABLE_NAME (COLUMN1,COLUMN2) VALUES(VALUE1, VALLUE2);
        -테이블 컬럼을 지정

    3) INSERT INTO ~ RETURNING *
       INSERT INTO ~ RETURNING 컬럼지정

3. UPDATE 문
    1) 테이블의 데이터를 수정함

    2) 조건에 해당하는 컬럼의 값만 업데이트 함
        UPDATE TABLE_NAME SET COLUMN1 = VALUE1, COLUMN2 = VALLUE2
        WHERE 조건;
    
    2-1)WHERE절이 없으므로 테이블의 전체 행을 대상으로 업데이트 함
          UPDATE TABLE_NAME 
          SET COLUMN1 = VALUE1, COLUMN2 = VALLUE2;


    3) UPDATE는 대상 행에 대해서 락(LOCK)을 걸음
        -LOCK : 다른 사용자는 해당 행에 대해서 작업을 못한다는 것임
        -UPDATE를 한 후 재빨리 COMMIT을 하지 않는다면 RDBMS의 동시성이 낮아짐

4. UPDATE JOIN 문
    1) 조인 연산 및 UPDATE 연산을 동시에 처리 할 수 있다

    2) UPDATE시 다른 테이블의 내용을 참조하고 싶을 때 UPDATE join 문 사용함
            -복잡한 업무를 처리하는데 유용한 방법임

        UPDATE TABLE                  --UPDATE할 테이블 지정
        SET A.COLUMN1 = 표현식         --특정 컬럼 UPDATE
        FROM 참조TABLE                 --참조 테이블 지정
        WHERE A.COLUMN1 = B.COLUMN1    --JOIN 조건 
    

5. DELETE 문
    1) 테이블에서 데이터를 삭제
    2) 문법
        DELETE
        FROM
            TARGER_TABLE A
        WHERE 조건식


6. UPSERT 문
    1) INSERT를 시도할 때 조건(상황)에 따라 UPDATE를 할 수 있는 구문
        -복잡한 업무를 처리하는데 유용한 방법임

    2) 테이블에 특정 행을 입력할 때 이미 존재하는 행이라면
        컬럼들을 UPDATE하고 존재하지 않는 행이라면 새로 INSERT하는 기능

    3) 문법
        INSERT INTO TABLE_NAME(COLUMN1) VALUES(VALUE1)
        ON CONFLICT TARGER ACTION;          --충돌시 다른 액션

        -  ON CONFLICT ~ DO NOTHING
            -에러는 발생하지 않으면서 아무것도 하지 않는 것
        
        -  ON CONFLICT ~ DO UPDATE SET


7. GROUP BY 절
    1) FROM절 및 WHERE절을 통해서 리턴된 형(집합)을 특정 컬럼 혹은 컬럼들을 기준으로 그룹화하는 기능임
    2)
       SELECT     * 또는 [DISTINCT] column_name AS 별칭, ...    (5)
       FROM       테이블 이름(들) [AS 테이블 별칭]               (1)
       [WHERE     검색조건(들)]                                 (2)
       [GROUP BY  컬럼명(들)]                                   (3)
       [HAVING    검색조건(들)]                                 (5)
       [ORDER BY  속성이름[ASC|DESC] ]                          (6)


       SELECT COLUMN, 집계함수(COLUMN2)     --GROUP BY 컬럼 기재
       FROM     TABLE_NAME
       GROUP BY COLUMN1                    --N개 컬럼을 GROUP BY하는 경우 ',' 구분
       ;    

       

8. HAVING 절
    1) GROUP BY 절을 통해 도출된 집계 결과에 대해 조건을 줘서 리넡되는 결과 집합을 제한할 수 있음

    2) HAVING절은 GROUP BY 절에 의해 생성된 그룹형의 조건을 설정함
        -cf) WHERE절은 GROUP BY절이 적용되기 전에 개별 행의 조건을 설정함

    3) GROUP BY결과와 함께 HAVING절을 사용하여 GROUP BY의 결과를 특정 조건으로 필터링하는 기능을 함

       SELECT COLUMN, 집계함수(COLUMN2)     --GROUP BY 컬럼 기재
       FROM     TABLE_NAME
       GROUP BY COLUMN1                    --N개 컬럼을 GROUP BY하는 경우 ',' 구분
       HAVING 조건식
       ;    


9. 집합연산자 (Set oprator)
    1) INTERSECT
    2) Union
    3) Union All
    4) Except


10. INTERSECT
    1) 2개 이상의 집합에 대한 교집합을 구할 수 있음
    2) A집합과 B집합의 교집합만을 보여줌
    3) INTERSECT 연산시 사용되는 SELECT문의 컬럼의 수와 순서가 동일해야 한
    4) 순서가 일치하는 각각 컬럼의 데이터 유형(타입)이 일치해야 함
    5) 여러 개의 SQL 문의 대한 교집합으로 중복된 행은 하나로 표시됨


11. UNION 연산
    1) 2개의 집합에 대한 합집합을 구함
    2) UNION은 결과집합의 중복을 제거하고, UNION All은 결과집합의 중복을 그래도 보여줌
    3) A집합 + B집합을 모두 보여준다
    4) UNION 연산시 사용되는 SELECT문의 컬럼의 수와 순서가 동일해야 한
    5) 순서가 일치하는 각각 컬럼의 데이터 유형(타입)이 일치해야 함

12. Except 연산
    1) 2개의 집합에 대한 차집합을 구함
    2) A집합 - B집합의 집합을 출력함
    4) Except 연산시 사용되는 SELECT문의 컬럼의 수와 순서가 동일해야 한
    5) 순서가 일치하는 각각 컬럼의 데이터 유형(타입)이 일치해야 함


13. 집계함수
    1) COUNT([컬럼명]) 
        -컬럼 내 값의 전체 행 수를 반환함(NULL 값은 제외)

    2) MAX([컬럼명])
        -컬럼 내 값들 중 최대값을 반환
    3) MIN([컬럼명])
        -컬럼 내 값들 중 최소값을 반환

    4) SUM([컬럼명])
        -컬럼의 데이터 타입이 숫자일 경우, 해당 컬럼 내 모든 데이터의 합을 반환(NULL제외)

    5) AVG([컬럼명])
        -컬럼의 데이터 타입이 숫자일 경우, 해당 컬럼 내 모든 데이터의 평균을 반환(NULL제외)